<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<# // CHANGE ME: The next line should be something like:
// $(SolutionDir)\dependencies\Pdoxcl2Sharp.dll #>
<#@ assembly name="$(SolutionDir)\dependencies\Pdoxcl2Sharp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pdoxcl2Sharp" #>  
<#@ output extension=".cs" #>
using System;
using Pdoxcl2Sharp;
using System.Collections.Generic;

namespace EU4.Savegame
{
<#

// Here is where you add any classes to be deserialized. Here is a tiny sample
// to get you started.

var classes = new[] {
	new {
		Name = "Savegame",
		Props = new[] {
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "string", Name = "Player", Quoted = true },
			new Property() { Type = "SavegameVersion", Name = "SavegameVersion" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "DlcEnabled", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "PlayersCountries", Quoted = true },
			new Property() { Type = "int", Name = "Speed" },
			new Property() { Type = "int", Name = "MultiplayerRandomSeed" },
			new Property() { Type = "int", Name = "MultiplayerRandomCount" },
			new Property() { Type = "int", Name = "NextMonarchId", Alias = "monarch" },
			new Property() { Type = "int", Name = "NextCardinalId", Alias = "cardinal" },
			new Property() { Type = "int", Name = "NextLeaderId", Alias = "leader" },
			new Property() { Type = "int", Name = "NextAdvisorId", Alias = "advisor" },
			new Property() { Type = "int", Name = "NextRebelId", Alias = "rebel" },
			new Property() { Type = "int", Name = "NextUnitId", Alias = "unit" },
			new Property() { Type = "TopFlags", Name = "Flags" },
			new Property() { Type = "GameplaySettings", Name = "GameplaySettings", Alias = "gameplaysettings" },
			new Property() { Type = "TradeNodeCollection", Name = "Trade" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "ProductionLeaderTag", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "DynamicCountries", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "TradegoodsSupply" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "TradegoodsDemand" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "TradegoodsProduced" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "TradegoodsNumSupplyProvinces" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "TradegoodsNumDemandProvinces" },
			//new Property() { Type = "IList<ParadoxId>", Name = "UndocumentedIds", Alias = "id" },
			new Property() { Type = "IList<RebelFaction>", Name = "RebelFactions" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "LatestPirateTargets" },
			new Property() { Type = "string", Name = "Emperor", Quoted = true },
			new Property() { Type = "double", Name = "ImperialInfluence" },
			new Property() { Type = "int", Name = "ReformLevel" },
			new Property() { Type = "bool", Name = "ImperialBanAllowed" },
			new Property() { Type = "bool", Name = "InternalHreCb" },
			new Property() { Type = "bool", Name = "HreInheritable" },
			new Property() { Type = "bool", Name = "AllowsFemaleEmperor" },
			new Property() { Type = "IList<OldEmperor>", Name = "OldEmperors" },
			new Property() { Type = "ReligionCollection", Name = "Religions" },
			new Property() { Type = "Papacy", Name = "Papacy" },
			new Property() { Type = "ProvinceCollection", Name = "Provinces" },
			new Property() { Type = "CountryCollection", Name = "Countries" },
			new Property() { Type = "ActiveAdvisorCollection", Name = "ActiveAdvisors" },
			new Property() { Type = "Diplomacy", Name = "Diplomacy" },
			new Property() { Type = "LedgerDataCollection", Name = "IncomeStatistics" },
			new Property() { Type = "LedgerDataCollection", Name = "NationSizeStatistics" },
			new Property() { Type = "LedgerDataCollection", Name = "ScoreStatistics" },
			new Property() { Type = "LedgerDataCollection", Name = "InflationStatistics" },
			new Property() { Type = "IList<ActiveWar>", Name = "ActiveWars" },
			new Property() { Type = "IList<PreviousWar>", Name = "PreviousWars" }
		}
	},
	new {
		Name = "OldEmperor",
		Props = new[] {
			new Property() { Type = "int", Name = "Id" },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "DateTime", Name = "Date" }
		}
	},
	new {
		Name = "Religion",
		Props = new[] {
			new Property() { Type = "string", Name = "Defender", Quoted = true },
			new Property() { Type = "DateTime?", Name = "DefenderDate" },
			new Property() { Type = "DateTime?", Name = "Enable" }
		}
	},
	new {
		Name = "RebelFaction", 
		Props = new[] {
			new Property() { Type = "ParadoxId", Name = "Id" },
			new Property() { Type = "int", Name = "Fraction" },
			new Property() { Type = "string", Name = "Type", Quoted = true },
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "string", Name = "Heretic", Quoted = true },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "string", Name = "Independence", Quoted = true },
			new Property() { Type = "string", Name = "Culture", Quoted = true },
			new Property() { Type = "string", Name = "Religion", Quoted = true },
			new Property() { Type = "string", Name = "Government", Quoted = true },
			new Property() { Type = "int", Name = "Province" },
			new Property() { Type = "int", Name = "Seed" },
			new Property() { Type = "IList<Leader>", Name = "Generals" },
			new Property() { Type = "ParadoxId", Name = "Leader" },
			new Property() { Type = "ParadoxId", Name = "Army" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Provinces" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "Friends", Alias = "friend" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "PossibleProvinces" },
			new Property() { Type = "bool?", Name = "Active" }
		}
	},
	new {
		Name = "Leader",
		Props = new[] {
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "string", Name = "Type" },
			new Property() { Type = "byte?", Name = "Manuever" },
			new Property() { Type = "byte?", Name = "Fire" },
			new Property() { Type = "byte?", Name = "Shock" },
			new Property() { Type = "byte?", Name = "Siege" },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "DateTime", Name = "Activation"  },
			new Property() { Type = "ParadoxId", Name = "Id" }
		}
	},
	new {
		Name = "SavegameVersion",
		Props = new [] {
			new Property() { Type = "int", Name = "First" },
			new Property() { Type = "int", Name = "Second" },
			new Property() { Type = "int", Name = "Third" },
			new Property() { Type = "int", Name = "Fourth" }
		}
	},
	new {
		Name = "TradeNode",
		Props = new[] {
			new Property() { Type = "string", Name = "Definitions", Quoted = true },
			new Property() { Type = "double", Name = "Current" },
			new Property() { Type = "double", Name = "LocalValue" },
			new Property() { Type = "double", Name = "Outgoing" },
			new Property() { Type = "double", Name = "ValueAddedOutgoing" },
			new Property() { Type = "double", Name = "Retention" },
			new Property() { Type = "double", Name = "SteerPower" },
			new Property() { Type = "double", Name = "Total" },
			new Property() { Type = "double", Name = "ProvincePower" },
			new Property() { Type = "double", Name = "Max" },
			new Property() { Type = "double", Name = "CollectorPower" },
			new Property() { Type = "double", Name = "PullPower" },
			new Property() { Type = "double", Name = "RetainPower" },
			new Property() { Type = "double", Name = "HighestPower" },
			new Property() { Type = "IList<TradePower>", Name = "Powers" },
			new Property() { Type = "IList<IncomingTrade>", Name = "Incomings" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "TradeGoodsSize" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "TopProvinces", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "TopProvincesValues" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "TopPower", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "TopPowerValues" },
			new Property() { Type = "bool", Name = "TradeCompanyRegion" }
		}
	},
	new {
		Name = "TradePower",
		Props = new[] {
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "double", Name = "Current" },
			new Property() { Type = "double", Name = "Prev" },
			new Property() { Type = "double", Name = "MaxPower" },
			new Property() { Type = "double", Name = "ProvincePower" },
			new Property() { Type = "double", Name = "ShipPower" },
			new Property() { Type = "double", Name = "PrivateerMission" },
			new Property() { Type = "double", Name = "PowerFraction" },
			new Property() { Type = "double", Name = "PowerFractionPush" },
			new Property() { Type = "double", Name = "Money" },
			new Property() { Type = "double", Name = "Total" },
			new Property() { Type = "double", Name = "SteerPower" },
			new Property() { Type = "int", Name = "Type" },
			new Property() { Type = "double", Name = "ActualAddedValue" },
			new Property() { Type = "bool", Name = "HasTrader" },
			new Property() { Type = "bool", Name = "HasCapital" },
			new Property() { Type = "bool", Name = "HasSubject" },
			new Property() { Type = "double", Name = "LightShip" },
			new Property() { Type = "double", Name = "TransferredOut" },
			new Property() { Type = "double", Name = "TransferredIn" },
			new Property() { Type = "PowerModifier", Name = "Modified" }
		}
	},
	new {
		Name = "IncomingTrade",
		Props = new[] {
			new Property() { Type = "double", Name = "ActualAddedValue" },
			new Property() { Type = "double", Name = "Value" },
			new Property() { Type = "int", Name = "From" }
		}
	},
	new {
		Name = "Papacy",
		Props = new[] {
			new Property() { Type = "string", Name = "PapalState", Quoted = true },
			new Property() { Type = "string", Name = "Controller", Quoted = true },
			new Property() { Type = "string", Name = "CrusadeTarget", Quoted = true },
			new Property() { Type = "DateTime", Name = "CrusadeStart" },
			new Property() { Type = "DateTime", Name = "LastExcommunication", Alias = "last_excom" },
			new Property() { Type = "bool", Name = "PapacyActive" },
			new Property() { Type = "int", Name = "WeightedCardinal" },
			new Property() { Type = "double", Name = "ReformDesire" },
			new Property() { Type = "CardinalCollection", Name = "ActiveCardinals" },
			new Property() { Type = "CardinalCollection", Name = "FutureCardinals" }
		}
	},
	new {
		Name = "Cardinal",
		Props = new[] {
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "int", Name = "CardinalAge" },
			new Property() { Type = "int", Name = "Location" },
			new Property() { Type = "string", Name = "Controller", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Votes" },
			new Property() { Type = "ParadoxId", Name = "Id" }
		}
	},
	new {
		Name = "ParadoxId",
		Props = new[] {
			new Property() { Type = "int", Name = "Id" },
			new Property() { Type = "int", Name = "Type" }
		}
	},
	new {
		Name = "Province",
		Props = new[] {
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "string", Name = "Owner", Quoted = true },
			new Property() { Type = "IList<string>", Name = "Core", Quoted = true },
			new Property() { Type = "IList<string>", Name = "Claims", Quoted = true },
			new Property() { Type = "string", Name = "Trade", Quoted = true },
			new Property() { Type = "string", Name = "Culture" },
			new Property() { Type = "string", Name = "Religion" },
			new Property() { Type = "string", Name = "Capital", Quoted = true },
			new Property() { Type = "bool", Name = "IsCity" },
			new Property() { Type = "double", Name = "Garrison" },
			new Property() { Type = "double", Name = "Manpower" },
			new Property() { Type = "double?", Name = "MissionaryProgress" },
			new Property() { Type = "string", Name = "TradeGoods" },
			new Property() { Type = "bool", Name = "Blockade" },
			new Property() { Type = "double", Name = "BlockadeEfficiency" },
			new Property() { Type = "ProvinceHistory", Name = "History" },
			new Property() { Type = "int", Name = "Patrol" },
			new Property() { Type = "[ConsecutiveElements] IList<DateTime>", Name = "DiscoveryDates" },
			new Property() { Type = "[ConsecutiveElements] IList<DateTime>", Name = "DiscoveryReligionDates" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "DiscoveredBy" },
			new Property() { Type = "double", Name = "NativeSize" },
			new Property() { Type = "int", Name = "NativeFerocity" },
			new Property() { Type = "int", Name = "NativeHostileness" },
			new Property() { Type = "int?", Name = "Nationalism" },
			new Property() { Type = "IList<Modifier>", Name = "Modifiers" },
			new Property() { Type = "IList<MilitaryConstruction>", Name = "MilitaryConstructions" },
			new Property() { Type = "IList<MerchantConstruction>", Name = "MerchantConstructions" },
			new Property() { Type = "IList<DiplomacyConstruction>", Name = "DiplomacyConstructions" },
			new Property() { Type = "BuildingConstruction", Name = "BuildingConstruction" },
			new Property() { Type = "double", Name = "TradePower" },
			new Property() { Type = "bool", Name = "HreLiberated" },
			new Property() { Type = "bool", Name = "UserChangedName" }
		}
	},
	new {
		Name = "Country",
		Props = new[] {
			new Property() { Type = "bool?", Name = "Player" },
			new Property() { Type = "bool?", Name = "WasPlayer" },
			new Property() { Type = "CountryHistory", Name = "History" },
			new Property() { Type = "TopFlags", Name = "Flags" },
			new Property() { Type = "TopFlags", Name = "HiddenFlags" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "Variables" },
			new Property() { Type = "int", Name = "Capital" },
			new Property() { Type = "bool", Name = "InitializedRivals" },
			new Property() { Type = "bool", Name = "DirtyColony" },
			new Property() { Type = "string", Name = "PrimaryCulture" },
			new Property() { Type = "IList<string>", Name = "AcceptedCultures" },
			new Property() { Type = "string", Name = "Religion" },
			new Property() { Type = "string", Name = "TechnologyGroup" },
			new Property() { Type = "double", Name = "LibertyDesire" },
			new Property() { Type = "string", Name = "UnitType" },
			new Property() { Type = "Technology", Name = "Technology" },
			new Property() { Type = "IList<string>", Name = "Rivals", Quoted = true },
			new Property() { Type = "IList<int>", Name = "RivalTimes" },
			new Property() { Type = "IList<string>", Name = "Enemies", Quoted = true },
			new Property() { Type = "int", Name = "RebelThreat" },
			new Property() { Type = "DateTime", Name = "LastElection" },
			new Property() { Type = "int", Name = "DiplomaticPowerCache" },
			new Property() { Type = "int", Name = "AvailableDiploRelationsCache" },
			new Property() { Type = "int", Name = "RelationsOverLimit" },
			new Property() { Type = "double", Name = "DelayedTreasure" },
			new Property() { Type = "int", Name = "NumTradeEmbargos" },
			new Property() { Type = "int", Name = "NumOfNonRivalTradeEmbargos" },
			new Property() { Type = "double", Name = "MilitaryStrength" },
			new Property() { Type = "double", Name = "LandMorale" },
			new Property() { Type = "double", Name = "NavalMorale" },
			new Property() { Type = "double", Name = "MaxLandMorale" },
			new Property() { Type = "double", Name = "MaxNavalMorale" },
			new Property() { Type = "double", Name = "Tariff" },
			new Property() { Type = "int", Name = "TotalWarWorth" },
			new Property() { Type = "int", Name = "NumOfRevolts" },
			new Property() { Type = "int", Name = "NumOwnedHomeCores" },
			new Property() { Type = "int", Name = "NumOfControlledCities" },
			new Property() { Type = "int", Name = "NumOfPorts" },
			new Property() { Type = "int", Name = "NumOfNonCores" },
			new Property() { Type = "int", Name = "NumOfCorePorts" },
			new Property() { Type = "int", Name = "NumOfTotalPorts" },
			new Property() { Type = "int", Name = "NumOfCardinals" },
			new Property() { Type = "int", Name = "NumOfMercenaries" },
			new Property() { Type = "int", Name = "NumOfCities" },
			new Property() { Type = "int", Name = "NumOfColonies" },
			new Property() { Type = "int", Name = "NumOfOverseas" },
			new Property() { Type = "int", Name = "NumOfAllies" },
			new Property() { Type = "int", Name = "NumOfIndependenceSupporters" },
			new Property() { Type = "int", Name = "NumOfRoyalMarriages" },
			new Property() { Type = "int", Name = "NumOfThroneClaims" },
			new Property() { Type = "int", Name = "NumOfVassals" },
			new Property() { Type = "int", Name = "NumOfProtectorates" },
			new Property() { Type = "int", Name = "NumOfColonialCountries" },
			new Property() { Type = "int", Name = "NumOfUnions" },
			new Property() { Type = "int", Name = "NumOfHeathenProvs" },
			new Property() { Type = "int", Name = "NumOfHereticProvs" },
			new Property() { Type = "int", Name = "NumOfMissionaries" },
			new Property() { Type = "double", Name = "InlandSeaRatio" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "NumOfBuildings" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "NumOfBuildingsUnderConstruction" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "ProducedGoodsValue" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "NumOfGoodsProduced" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "NumOfReligions" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "NumOfLeaders" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "BorderPercentage" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "BorderSizeInTax" },
			new Property() { Type = "bool", Name = "UpdateBorderDistance" },
			new Property() { Type = "bool", Name = "UpdateSupplyRange" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "BorderDistance" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "BorderDistanceOverseas" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Range" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "Neighbors", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "HomeNeighbors", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "CoreNeighbors", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "IsNeighbor" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "IsHomeNeighbor" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "IsCoreNeighbor" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "Friends", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "Allies", Quoted = true },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "TradeEmbargoedBy", Quoted = true },
			new Property() { Type = "double", Name = "Score" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "ScoreRating" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "ScoreRank" },
			new Property() { Type = "double", Name = "Prestige" },
			new Property() { Type = "double", Name = "Stability" },
			new Property() { Type = "double", Name = "Treasury" },
			new Property() { Type = "double", Name = "CallForPease" },
			new Property() { Type = "double", Name = "EstimatedMonthlyIncome" },
			new Property() { Type = "double", Name = "Inflation" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "InflationHistory" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "InflationCache" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "UnderConstruction" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "UnderConstructionQueued" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "TotalCount" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "OwnedProvinces" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "ClaimProvinces" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "IdeaMayCache" },
			new Property() { Type = "bool", Name = "UpdateOpinionCache" },
			new Property() { Type = "bool", Name = "NeedsRefresh" },
			new Property() { Type = "bool", Name = "NeedsRebelUnitRefresh" },
			new Property() { Type = "DateTime", Name = "LastBankrupt" },
			new Property() { Type = "DateTime", Name = "Wartax" },
			new Property() { Type = "double", Name = "WarExhaustion" },
			new Property() { Type = "double", Name = "LandMaintenance" },
			new Property() { Type = "double", Name = "NavalMaintenance" },
			new Property() { Type = "double", Name = "ColonialMaintenance" },
			new Property() { Type = "double", Name = "MissionaryMaintenance" },
			new Property() { Type = "double", Name = "ArmyTradition" },
			new Property() { Type = "double", Name = "NavyTradition" },
			new Property() { Type = "int", Name = "MilitaryRating" },
			new Property() { Type = "int", Name = "MilitaryRatingCache" },
			new Property() { Type = "double", Name = "NavalForcelimit" },
			new Property() { Type = "DateTime", Name = "LastWarEnded" },
			new Property() { Type = "int", Name = "NumUncontestedCores" },
			new Property() { Type = "CountryLedger", Name = "Ledger" },
			new Property() { Type = "int", Name = "LoanSize" },
			new Property() { Type = "double", Name = "EstimatedLoan" },
			new Property() { Type = "IList<Loan>", Name = "Loans" },
			new Property() { Type = "double", Name = "ReligionUnity" },
			new Property() { Type = "double", Name = "Legitimacy" },
			new Property() { Type = "double", Name = "Mercantilism" },
			//active_idea_groups
			new Property() { Type = "IList<ParadoxId>", Name = "Advisors" },
			new Property() { Type = "string", Name = "Government" },
			new Property() { Type = "EnvoyCollection", Name = "Colonists" },
			new Property() { Type = "EnvoyCollection", Name = "Merchants" },
			new Property() { Type = "EnvoyCollection", Name = "Missionaries" },
			new Property() { Type = "EnvoyCollection", Name = "Diplomats" },
			new Property() { Type = "IList<Modifier>", Name = "Modifiers" },
			new Property() { Type = "double", Name = "Manpower" },
			new Property() { Type = "double", Name = "MaxManpower" },
			new Property() { Type = "string", Name = "Infantry", Quoted = true },
			new Property() { Type = "string", Name = "Cavalry", Quoted = true },
			new Property() { Type = "string", Name = "Artillery", Quoted = true },
			new Property() { Type = "string", Name = "HeavyShip", Quoted = true },
			new Property() { Type = "string", Name = "LightShip", Quoted = true },
			new Property() { Type = "string", Name = "Galley", Quoted = true },
			new Property() { Type = "string", Name = "Transport", Quoted = true },
			new Property() { Type = "IList<Mercenary>", Name = "Mercenaries" },
			new Property() { Type = "double", Name = "OverextensionPercentage" },
			new Property() { Type = "IList<Army>", Name = "Armies" },
			new Property() { Type = "IList<Navy>", Name = "Navies" },
			new Property() { Type = "ActiveRelationCollection", Name = "ActiveRelations" },
			new Property() { Type = "IList<ParadoxId>", Name = "Leaders" },
			new Property() { Type = "ParadoxId", Name = "Monarch" },
			new Property() { Type = "ParadoxId", Name = "Heir" },
			new Property() { Type = "DateTime", Name = "Inauguration" },
			new Property() { Type = "DateTime", Name = "LastMigration" },
			new Property() { Type = "IList<ParadoxId>", Name = "PreviousMonarchs" },
			new Property() { Type = "DateTime", Name = "LastMajorMissionPick" },
			new Property() { Type = "DateTime", Name = "LastMajorMissionCancel" },
			new Property() { Type = "string", Name = "LastMajorMission", Quoted = true },
			new Property() { Type = "int?", Name = "LastStrategyIndex" },
			new Property() { Type = "Ai", Name = "Ai" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "TradedBonus" },
			new Property() { Type = "[ConsecutiveElements] IList<string>", Name = "HistoricalFriends" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Powers" },
		}
	},
	new {
		Name = "Ai",
		Props = new[] {
			new Property() { Type = "bool", Name = "Initialized" },
			new Property() { Type = "bool", Name = "InitializedAttitudes" },
			new Property() { Type = "bool", Name = "Static" },
			new Property() { Type = "string", Name = "Personality", Quoted = true },
			new Property() { Type = "DateTime", Name = "LastRecalcDate" },
			new Property() { Type = "bool", Name = "HreInterest" },
			new Property() { Type = "bool", Name = "PapacyInterest" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Powers" },
			new Property() { Type = "IList<AiPriority>", Name = "ConquerProvs" },
			new Property() { Type = "IList<AiPriority>", Name = "Threats" },
			new Property() { Type = "IList<AiPriority>", Name = "Antagonizes" },
			new Property() { Type = "IList<AiPriority>", Name = "Befriends" },
			new Property() { Type = "IList<AiPriority>", Name = "Protects" },
			new Property() { Type = "IList<AiPriority>", Name = "Rivals" },
			new Property() { Type = "IList<AiPriority>", Name = "Vassals" },
			new Property() { Type = "IList<AiPriority>", Name = "MilitaryAccesses" }
		}
	},
	new {
		Name = "AiPriority",
		Props = new[] {
			new Property() { Type = "int", Name = "Id" },
			new Property() { Type = "int", Name = "Value" }
		}
	},
	new {
		Name = "Technology",
		Props = new[] {
			new Property() { Type = "byte", Name = "AdmTech" },
			new Property() { Type = "byte", Name = "DipTech" },
			new Property() { Type = "byte", Name = "MilTech" }
		}
	},
	new {
		Name = "CountryLedger",
		Props = new[] {
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "Income" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "Expense" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "ThisMonthExpense", Alias = "thismonthexpense" },
			new Property() { Type = "double", Name = "LastMonthIncome", Alias = "lastmonthincome" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "LastMonthIncomeTable", Alias = "lastmonthincometable" },
			new Property() { Type = "double", Name = "LastMonthExpense", Alias = "lastmonthexpense" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "LastYearIncome", Alias = "lastyearincome" },
			new Property() { Type = "[ConsecutiveElements] IList<double>", Name = "LastYearExpense", Alias = "lastyearexpense" }
		}
	},
	new {
		Name = "Mercenary",
		Props = new[] {
			new Property() { Type = "int", Name = "Home" },
			new Property() { Type = "string", Name = "Type", Quoted = true }
		}
	},
	new {
		Name = "Loan",
		Props = new[] {
			new Property() { Type = "ParadoxId", Name = "Id" },
			new Property() { Type = "string", Name = "Lender", Quoted = true },
			new Property() { Type = "double", Name = "Interest" },
			new Property() { Type = "int", Name = "Amount" },
			new Property() { Type = "DateTime", Name = "ExpiryDate" }
		}
	},
	new {
		Name = "ActiveRelation",
		Props = new[] {
			new Property() { Type = "IList<Opinion>", Name = "Opinions" },
			new Property() { Type = "int?", Name = "CachedSum" },
			new Property() { Type = "bool?", Name = "TruceWith" },
			new Property() { Type = "int?", Name = "Trust" },
			new Property() { Type = "bool?", Name = "HasChanged" },
			new Property() { Type = "bool?", Name = "HasColonyClaim" },
			new Property() { Type = "bool?", Name = "TradeRefusal" },
			new Property() { Type = "DateTime?", Name = "LastSendDiplomat" },
			new Property() { Type = "DateTime?", Name = "LastWar" },
			new Property() { Type = "string", Name = "Attitude", Quoted = true },
			new Property() { Type = "int?", Name = "IsFightingWarTogether" },
			new Property() { Type = "string", Name = "RelationCostingPower" },
			new Property() { Type = "string", Name = "HasReligionGroupClaim" },
			new Property() { Type = "bool?", Name = "RecalcAttitude" },
			new Property() { Type = "bool?", Name = "HasClaim" },
			new Property() { Type = "int?", Name = "FabricatingClaimProvince" },
			new Property() { Type = "bool?", Name = "IsFabricatingClaim" },
			new Property() { Type = "bool?", Name = "IsSowingDiscontent" }
		}
	},
	new {
		Name = "Opinion",
		Props = new[] {
			new Property() { Type = "string", Name = "Modifier", Quoted = true },
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "double", Name = "CurrentOpinion" },
			new Property() { Type = "bool", Name = "ExpiryDate" },
			new Property() { Type = "bool", Name = "DelayedDecay" }
		}
	},
	new {
		Name = "Army",
		Props = new[] {
			new Property() { Type = "ParadoxId", Name = "Id" },
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "ParadoxId", Name = "Leader" },
			new Property() { Type = "int", Name = "Previous" },
			new Property() { Type = "double", Name = "MovementProgress" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Path" },
			new Property() { Type = "int", Name = "Location" },
			new Property() { Type = "IList<Unit>", Name = "Regiments" },
			new Property() { Type = "string", Name = "GraphicalCulture" },
			new Property() { Type = "bool", Name = "MainArmy" },
			new Property() { Type = "bool", Name = "HunterKiller" },
			new Property() { Type = "int", Name = "Target" },
			new Property() { Type = "int", Name = "StagingProvince" },
			new Property() { Type = "int", Name = "Base" }
		}
	},
	new {
		Name = "Navy",
		Props = new[] {
			new Property() { Type = "ParadoxId", Name = "Id" },
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "ParadoxId", Name = "Leader" },
			new Property() { Type = "int", Name = "Previous" },
			new Property() { Type = "double", Name = "MovementProgress" },
			new Property() { Type = "[ConsecutiveElements] IList<int>", Name = "Path" },
			new Property() { Type = "int", Name = "Location" },
			new Property() { Type = "IList<Unit>", Name = "Ships" },
			new Property() { Type = "string", Name = "GraphicalCulture" },
			new Property() { Type = "IList<Army>", Name = "Armies" },
			new Property() { Type = "bool", Name = "AtSea" },
			new Property() { Type = "int?", Name = "Node" },
			new Property() { Type = "IList<int>", Name = "Trades" },
			new Property() { Type = "int", Name = "CurrentRouteTarget" },
			new Property() { Type = "DateTime", Name = "LastAtSea" }
		}
	},
	new {
		Name = "Unit",
		Props = new[] {
			new Property() { Type = "ParadoxId", Name = "Id" },
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "int", Name = "Home" },
			new Property() { Type = "string", Name = "Type", Quoted = true },
			new Property() { Type = "double", Name = "Morale" },
			new Property() { Type = "double", Name = "Strength" },
			new Property() { Type = "ParadoxId", Name = "LastTarget" }
		}
	},
	new {
		Name = "ProvinceHistory",
		Props = new[] {
			new Property() { Type = "string", Name = "Owner", Quoted = true }
		}
	},
	new {
		Name = "CountryHistory",
		Props = new[] {
			new Property() { Type = "string", Name = "Owner", Quoted = true }
		}
	},
	new {
		Name = "Envoy",
		Props = new[] {
			new Property() { Type = "int", Name = "Action" },
			new Property() { Type = "string", Name = "Name", Quoted = true },
			new Property() { Type = "int", Name = "Type" },
			new Property() { Type = "int", Name = "Id" }
		}
	},
	new {
		Name = "BuildingConstruction",
		Props = new[] {
			new Property() { Type = "DateTime", Name = "StartDate" },
			new Property() { Type = "int", Name = "Total" },
			new Property() { Type = "double", Name = "Progress" },
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "int", Name = "Envoy" },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "bool", Name = "End" },
			new Property() { Type = "double", Name = "Cost" },
			new Property() { Type = "int", Name = "Building" }
		}
	},
	new {
		Name = "Modifier",
		Props = new[] {
			new Property() { Type = "string", Name = "Name", Quoted = true, Alias = "modifier" },
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "bool", Name = "RulerModifier" },
			new Property() { Type = "bool", Name = "Permanent" },
			new Property() { Type = "bool", Name = "Hidden" }
		}
	},
	new {
		Name = "PowerModifier",
		Props = new[] {
			new Property() { Type = "string", Name = "Name", Quoted = true, Alias = "key" },
			new Property() { Type = "int", Name = "Duration" },
			new Property() { Type = "double", Name = "Power" }
		}
	},
	new {
		Name = "DiplomacyConstruction",
		Props = new[] {
			new Property() { Type = "DateTime", Name = "StartDate" },
			new Property() { Type = "int", Name = "Total" },
			new Property() { Type = "double", Name = "Progress" },
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "int", Name = "Envoy" },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "bool", Name = "End" },
			new Property() { Type = "int", Name = "Cost" },
			new Property() { Type = "string", Name = "Actor", Quoted = true },
			new Property() { Type = "string", Name = "Recipient", Quoted = true },
			new Property() { Type = "string", Name = "Action", Quoted = true },
			new Property() { Type = "int", Name = "FromProvince" },
			new Property() { Type = "int", Name = "ToProvince" },
			new Property() { Type = "bool", Name = "Once" },
			new Property() { Type = "string", Name = "ActionToken" }
		}
	},
	new {
		Name = "MerchantConstruction",
		Props = new[] {
			new Property() { Type = "DateTime", Name = "StartDate" },
			new Property() { Type = "int", Name = "Total" },
			new Property() { Type = "double", Name = "Progress" },
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "int", Name = "Envoy" },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "bool", Name = "End" },
			new Property() { Type = "int", Name = "Cost" },
			new Property() { Type = "int", Name = "Node" },
			new Property() { Type = "int", Name = "From" },
			new Property() { Type = "int", Name = "To" },
			new Property() { Type = "int", Name = "Direction" },
			new Property() { Type = "int", Name = "Type" },
		}
	},
	new {
		Name = "MilitaryConstruction",
		Props = new[] {
			new Property() { Type = "DateTime", Name = "StartDate" },
			new Property() { Type = "int", Name = "Total" },
			new Property() { Type = "double", Name = "Progress" },
			new Property() { Type = "DateTime", Name = "Date" },
			new Property() { Type = "int", Name = "Envoy" },
			new Property() { Type = "string", Name = "Country", Quoted = true },
			new Property() { Type = "bool", Name = "End" },
			new Property() { Type = "int", Name = "Cost" },
			new Property() { Type = "string", Name = "Type", Quoted = true },
			new Property() { Type = "ParadoxId", Name = "Unit" },
			new Property() { Type = "ParadoxId", Name = "Regiment" }
		}
	},
	new {
		Name =	"ActiveAdvisor",
		Props = new[] {
			new Property() { Type = "IList<ParadoxId>", Name = "Advisors" }
		}
	},
	new {
		Name = "Diplomacy",
		Props = new[] {
			new Property() { Type = "IList<DiplomacyEvent>", Name = "CasusBellis" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "Alliances" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "MilitaryAccesses" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "Warnings" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "RoyalMarriages" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "ImproveRelations" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "Guarantees" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "IsColonials" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "Protectorates" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "Vassals" },
			new Property() { Type = "IList<DiplomacyEvent>", Name = "Subsidies", Alias = "subsidies" }
		}
	},
	new {
		Name = "DiplomacyEvent",
		Props = new[] {
			new Property() { Type = "string", Name = "Type", Quoted = true },
			new Property() { Type = "string", Name = "First", Quoted = true },
			new Property() { Type = "string", Name = "Second", Quoted = true },
			new Property() { Type = "DateTime?", Name = "EndDate" },
			new Property() { Type = "bool", Name = "Cancel" },
			new Property() { Type = "DateTime", Name = "StartDate" },
			new Property() { Type = "double?", Name = "Amount" },
			new Property() { Type = "int?", Name = "Duration" },
			new Property() { Type = "int?", Name = "Envoy" },
		}
	}
};

// end add

INamingConvention naming = new ParadoxNamingConvention();

var dict = new Dictionary<string, string>()
{
    { "int", "parser.ReadInt32()" },
    { "string", "parser.ReadString()" },
    { "bool", "parser.ReadBool()" },
    { "byte", "parser.ReadByte()" },
    { "DateTime", "parser.ReadDateTime()" },
    { "double", "parser.ReadDouble()" },
    { "short", "parser.ReadInt16()" },
    { "sbyte", "parser.ReadSByte()" },
    { "float", "parser.ReadFloat()" },
    { "ushort", "parser.ReadUInt16()" },
    { "uint", "parser.ReadUInt32()" },
	{ "int?", "parser.ReadInt32()" },
    { "bool?", "parser.ReadBool()" },
    { "byte?", "parser.ReadByte()" },
    { "DateTime?", "parser.ReadDateTime()" },
    { "double?", "parser.ReadDouble()" },
    { "short?", "parser.ReadInt16()" },
    { "sbyte?", "parser.ReadSByte()" },
    { "float?", "parser.ReadFloat()" },
    { "ushort?", "parser.ReadUInt16()" },
    { "uint?", "parser.ReadUInt32()" },
    { "[ConsecutiveElements] IEnumerable<string>", "parser.ReadStringList()" },
    { "[ConsecutiveElements] ICollection<string>", "parser.ReadStringList()" },
    { "[ConsecutiveElements] IList<string>", "parser.ReadStringList()" },
    { "[ConsecutiveElements] List<string>", "parser.ReadStringList()" },
    { "[ConsecutiveElements] IEnumerable<int>", "parser.ReadIntList()" },
    { "[ConsecutiveElements] ICollection<int>", "parser.ReadIntList()" },
    { "[ConsecutiveElements] IList<int>", "parser.ReadIntList()" },
    { "[ConsecutiveElements] List<int>", "parser.ReadIntList()" },
    { "[ConsecutiveElements] IEnumerable<double>", "parser.ReadDoubleList()" },
    { "[ConsecutiveElements] ICollection<double>", "parser.ReadDoubleList()" },
    { "[ConsecutiveElements] IList<double>", "parser.ReadDoubleList()" },
    { "[ConsecutiveElements] List<double>", "parser.ReadDoubleList()" },
    { "[ConsecutiveElements] IEnumerable<DateTime>", "parser.ReadDateTimeList()" },
    { "[ConsecutiveElements] ICollection<DateTime>", "parser.ReadDateTimeList()" },
    { "[ConsecutiveElements] IList<DateTime>", "parser.ReadDateTimeList()" },
    { "[ConsecutiveElements] List<DateTime>", "parser.ReadDateTimeList()" }
};

foreach (var clazz in classes) { #>
	public partial class <#= clazz.Name #> : IParadoxRead, IParadoxWrite
	{
<# foreach (var prop in clazz.Props) { #>
		public <#= prop.Type.Replace("[ConsecutiveElements] ", "") #> <#= prop.Name #> { get; set; }
<# } #>

		public <#= clazz.Name #>()
		{
<#  var lists = clazz.Props.Where(x => x.IsNonConsecutiveList);
    foreach (var list in lists)
    {
        var str = list.ExtractInnerListType();
        WriteLine("            " + list.Name + " = new List<" + str + ">();");
    }#>
		}

		public void TokenCallback(ParadoxParser parser, string token)
		{
			switch (token)
			{
<#
        ClearIndent();
        PushIndent("            "); 
        foreach (var prop in clazz.Props) {
            Write("case " + '"');
            Write(prop.GetStr(naming));
            Write("\": ");
            
            string res;
            string fallback = "parser.Parse(new " + prop.Type + "())";
            if (dict.TryGetValue(prop.Type, out res))
                Write(prop.Name + " = " + res);
            else if (prop.IsNonConsecutiveList)
            {
                var str = prop.ExtractInnerListType();
                fallback = "parser.Parse(new " + str + "())";
                Write(prop.Name + ".Add(" + (dict.TryGetValue(str, out res)
                    ? res : fallback) + ")");
            }
            else
                Write(prop.Name + " = " + fallback);
            WriteLine("; break;");
        }
        
        WriteLine("}");
        ClearIndent();
         #>
		}

		public void Write(ParadoxStreamWriter writer)
		{
<#
        ClearIndent();
        PushIndent("            "); 
        foreach (var prop in clazz.Props) {
            var qStr = !prop.Quoted ? "" : ", ValueWrite.Quoted";

			// eg. nullables
			if (prop.Type.Contains('?')) {
				WriteLine("if (" + prop.Name + ".HasValue)");
				WriteLine("{");
                PushIndent("    ");
				WriteLine("writer.WriteLine(\"" + prop.GetStr(naming) + "\", " + prop.Name + ".Value);");
                PopIndent();
				WriteLine("}");
			}

            // eg. List<string>, add_core
            else if (prop.IsNonConsecutiveList && dict.ContainsKey(prop.ExtractInnerListType())) {
                WriteLine("foreach(var val in " + prop.Name + ")");
                WriteLine("{");
                PushIndent("    ");
                WriteLine("writer.WriteLine(\"" + prop.GetStr(naming) + "\", val" + qStr + ");");
                PopIndent();
                WriteLine("}");
            }
             
            // eg. List<Army>
            else if (prop.IsNonConsecutiveList && !dict.ContainsKey(prop.ExtractInnerListType())) {
                WriteLine("foreach(var val in " + prop.Name + ")");
                WriteLine("{");
                PushIndent("    ");
                WriteLine("writer.Write(\"" + prop.GetStr(naming) + "\", val);");
                PopIndent();
                WriteLine("}");
            }

            // eg. string, int, etc
            else if (dict.ContainsKey(prop.Type) && !prop.Type.Contains("[ConsecutiveElements]")) {
                if (prop.Type == "string") {
                    WriteLine("if (" + prop.Name + " != null)");
                    WriteLine("{");
                    PushIndent("    ");
                }

                WriteLine("writer.WriteLine(\"" + prop.GetStr(naming) + "\", " + prop.Name + qStr + ");");

                if (prop.Type == "string") {
                    PopIndent();
                    WriteLine("}");
                }
            }

            // eg. List<string> { you me them }
            else if (dict.ContainsKey(prop.Type)) {
                WriteLine("writer.Write(\"" + prop.GetStr(naming) + "={ \");");
                WriteLine("foreach (var val in " + prop.Name + ")");
                WriteLine("{");
                PushIndent("    ");
                WriteLine("writer.Write(val" + qStr + ");");
                WriteLine("writer.Write(\" \");");
                PopIndent();
                WriteLine("}");
                WriteLine("writer.WriteLine(\"}\");");
            }
            else {
                WriteLine("if (" + prop.Name + " != null)");
                WriteLine("{");
                PushIndent("    ");
                WriteLine("writer.Write(\"" + prop.GetStr(naming) + "\", " + prop.Name + ");");
                PopIndent();
                WriteLine("}");
            }
        }

        ClearIndent();
    #>
        }
    }
<# } #>
}
